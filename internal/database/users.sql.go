// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearUsers = `-- name: ClearUsers :exec
TRUNCATE users CASCADE
`

func (q *Queries) ClearUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearUsers)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, created_at, updated_at, hashed_password)
VALUES ($1,
        $2,
        $3,
        $4,
        $5)
RETURNING id, email, created_at, updated_at, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, created_at, updated_at, hashed_password, is_chirpy_red
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, created_at, updated_at, hashed_password, is_chirpy_red
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT u.id, u.email, u.created_at, u.updated_at, u.hashed_password, u.is_chirpy_red
FROM users u
         JOIN refresh_tokens rt ON rt.user_id = u.id
WHERE rt.user_id = $1
  AND rt.revoked_at IS NULL
  AND rt.expires_at > NOW()
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET email           = $1,
    hashed_password = $2,
    updated_at      = NOW()
WHERE id = $3
RETURNING id, email, created_at, updated_at, hashed_password, is_chirpy_red
`

type UpdateUserByIDParams struct {
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByID, arg.Email, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserChirpyRedByID = `-- name: UpdateUserChirpyRedByID :one
UPDATE users
SET is_chirpy_red = $1,
    updated_at    = NOW()
WHERE id = $2
RETURNING id, email, created_at, updated_at, hashed_password, is_chirpy_red
`

type UpdateUserChirpyRedByIDParams struct {
	IsChirpyRed bool      `json:"is_chirpy_red"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserChirpyRedByID(ctx context.Context, arg UpdateUserChirpyRedByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserChirpyRedByID, arg.IsChirpyRed, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}
